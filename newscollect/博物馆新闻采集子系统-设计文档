# 设计文档

[toc]

## 1. 博物馆网站数据采集系统设计文档

### 1.1 引言

#### 1.1.1 系统概述

博物馆数据库采集系统将实现国家一级博物馆官网的部分内容的数据爬取，数据加工，数据上传以及数据更新的功能。

#### 1.1.2 文档概述

本文档描述了博物馆数据库采集系统的详细设计。

- 阅读人群：开发人员，项目管理人员，测试人员。

#### 1.1.3 基线

实现有官网的国家一级博物馆的名称，介绍，藏品及活动的数据爬取，数据加工，数据上传以及数据更新的功能。

### 1.2 引用资料

《GB-T+8567-2006计算机软件文档编制规范》

### 1.3 系统设计概述

该系统按照功能划分为客户端子系统和管理端子系统，数据采集管理人员管理数据的获取与加工，用户（后台数据库管理人员）从系统申请查看数据或更新数据。

### 1.4 系统体系结构设计

#### 1.4.1 体系结构

##### 1.4.1.1 程序模块划分

| 名称     | 功能                         |
| -------- | ---------------------------- |
| 数据爬取 | 爬取所有博物馆需要采集的数据 |
| 数据加工 | 筛选所需要的数据             |
| 数据存储 | 存储加工后的数据             |
| 数据提交 | 将加工好的数据提供给用户     |
| 数据更新 | 获得用户请求，更新数据       |

##### 1.4.1.2 程序层次结构关系

 管理者

``` mermaid
graph LR
O[数据更新] 
-->A[数据爬取]
-->B[数据加工] 
-->C[数据存储]
-->D[数据提交]
```

使用者

```mermaid
graph LR
A[数据提交]--> B[数据使用]
C[数据更新]--> D[管理者] 
```
![层析结构](https://github.com/MATH2018-SE/SE-multi-project/blob/main/MuseumDataCollectSubsystem/img/%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.jpg?raw=true)

##### 1.4.1.3 流程图

```mermaid
graph TD
    start[开始] --> node1[需求分析]
    node1 --> node2[数据结构设计]
    node2 --> node2_10[对上接口设计] 
    node2_10 --> node2_11[没有对上接口]
    node2 --> node2_20[对下接口设计]
    node2_20 --> node2_21[构造内部字典] --> node2_22[由字典向数据库提交代码]
    node2_11 --> node3[代码结构]
    node2_22 --> node3
    node3 --> node4[代码区块编写]
    node4 --> node4_10[区块1] --> node4_11[区块1测试]
    node4 --> node4_20[区块2] --> node4_21[区块2测试]
    node4 --> node4_x[...] --> node4_x1[分区块...测试]
    node4 --> node4_n[区块n] --> node4_n1[区块n测试]
    node4_11 --> node5[代码整合]
    node4_21 --> node5
    node4_x1 --> node5
    node4_n1 --> node5
    node3 --> node3_1[定时更新] --> node3_2[定时更新测试]
    node3 --> node3_3[提交数据库] --> node3_4[提交数据库测试]
    node3_2 --> node5
    node3_4 --> node5
    node5 --> node6[工程维护]
    node6 --> stop[结束]
```
![流程图](https://github.com/MATH2018-SE/SE-multi-project/blob/main/MuseumDataCollectSubsystem/img/%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg?raw=true)


#### 1.4.2 全局数据结构

##### 1.4.2.1 说明

本章说明本程序系统中使用的全局数据常量、变量和数据结构

##### 1.4.2.2 常量

项目名称，文件目录，配置项，接口

##### 1.4.2.3 全局变量

无

##### 1.4.2.4 数据结构

数据项见需求文档。有博物馆、藏品和活动三个实体。



### 1.5  接口设计

#### 1.5.1 用户接口

| 接口名称   | 对象         | 功能                         |
| ---------- | ------------ | ---------------------------- |
| 主程序接口 | 数据库管理员 | 执行数据更新和数据提交的服务 |

#### 1.5.2 外部接口

| 接口名称     | 对象   | 功能                                  |
| ------------ | ------ | ------------------------------------- |
| 数据提交接口 | 数据库 | 提交数据表格csv文件以将数据导入数据库 |

#### 1.5.3 内部接口

| 接口名称           | 函数名                 | 参数与返回值     | 对象             | 功能                       |
| ------------------ | ---------------------- | ---------------- | ---------------- | -------------------------- |
| 博物馆信息爬取函数 | `getMuseumData()`      | 无参数，无返回值 | 每个爬虫文件内部 | 被更新程序载入并调用       |
| 博物馆藏品爬取函数 | `getCollectionsData()` | 无参数，无返回值 | 每个爬虫文件内部 | 被更新程序载入并调用       |
| 博物馆活动爬取函数 | `getActivitiesData()`  | 无参数，无返回值 | 每个爬虫文件内部 | 被更新程序载入并调用       |
| 爬取后文件保存接口 |                        |                  | 每个爬虫文件内部 | 保存为字典，被提交程序调用 |

* 数据转换成json文件，再将json文件转换为csv文件



### 1.6 环境

- 本系统的硬件环境如下：
  - 客户机：普通PC
    - CPU：P4 1.8GHz以上
    - 内存：256MB以上
    - 能够运行IE5.0以上或者Netscape4.0以上版本的机器
    - 分辨率：推荐使用1024*768像素
- 本系统的的软件环境如下：
  - 操作系统：Unix/Linux/windows2000或以上版本
  - 数据库：SQL Server 2000
  - 开发环境：python
  - 浏览器：Edge, IE6.0以上，Chrome, FireFox
- 主机安装说明:

  1. 安装python3,安装第三方库
     `pip install -r requirements.txt`
     `requirements.txt`
  2. 安装 Egde, Chrome, FireFox 浏览器，安装对应版本 Driver. 
  3. 运行`main.py`文件

### 1.7 异常设计

#### 1.7.1 动机

在代码编写期间可能出现一下问题。

#### 1.7.2 异常类

| 异常类型             | 异常原因                                 | 补救措施         |
| -------------------- | ---------------------------------------- | ---------------- |
| 网络连接不畅         | 连接超时                                 | 多次重连         |
| 代码爬取时间过长     | 爬虫假死                                 | 增加超时响应对策 |
| 代码无法正常爬取信息 | 页面源代码发生更改，原爬虫代码不再适用。 | 人工更改代码     |

#### 1.7.3 解决异常或代码维护流程

维护见1.10

```mermaid
graph 

A(更新文件报错)
--> A1(错误记录)
--> C(识别错误类型)

C --> C1(页面源代码发生更改或原网站迁移)
C1 --> A2(错误记录定位到文件和代码编程人员) 
--> B(通知编程人员更新代码)
--> B1(代码通过质量审查)
--> B2(由代码管理系统管理旧版本的代码)
B1 --> A3(重新更新文件)
A3 --> END(结束)

D(前端反馈) --> A1
C --> C2(出现新的博物馆官网)
C2 --> E1(派出新的人员维护新官网)
E1 --> B


```
![异常处理](https://github.com/MATH2018-SE/SE-multi-project/blob/main/MuseumDataCollectSubsystem/img/%E8%BF%90%E8%A1%8C%E6%AD%A5%E9%AA%A4.jpg?raw=true)
![异常处理](https://github.com/MATH2018-SE/SE-multi-project/blob/main/MuseumDataCollectSubsystem/img/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.jpg?raw=true)

### 1.8 代码测试

#### 1.8.1 概述

本测试为代码测试与质量检验设计文档，提供给用户、测试人员、开发人员、项目管理者等。

#### 1.8.1 测试类型

| 测试类型           | 测试内容                                                     | 测试目的与测试要求                                           | 测试方法                                                     |
| ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |
| 各代码区块测试     | 1. 测试每个代码三个接口的爬虫是否能够正常运行并将数据保存至对应位置 | 检验代码区块是否可以独立运行。要求<br />1. 数据输出路径正确，数据格式正确。<br />2. 代码运行时，终端不能有输出。 | 运行代码，抽样调查数据字典。记录运行时间。                   |
| 定时更新测试       | 1. 测试每个接口是否能够正常爬取<br />2. 当网络异常时，能否暂时停止运行 | 检查每个定时更新程序是否可以运行。要求<br />1. 调试信息输出正确，不包含爬虫信息输出。<br />2. 文件保存路径正确。 | 运行代码，检查对应目录下数据字典是否存在                     |
| 提交数据库测试     | 1. 测试数据库是否能够连接<br />2. 测试数据是否能上传到服务器 | 检查数据是否提交                                             | 运行代码，检查数据库                                         |
| 子系统整体运行测试 | 1. 测试三个定时更新程序和提交数据库能否同时运行<br />2. 系统跨平台是否能正常运行 | 检查运行是否正常。要求<br />1. 每个模块能够正常运行，不报错<br />2. 系统跨平台能正常运行 | 运行代码，检查运行输出信息，数据字典，以及数据库<br />换平台配置该子系统能够安装，并正常运行 |

#### 1.8.2 测试过程

- 每编完一个区块的代码就要进行区块测试
- 当有足够多区块时（10个）左右，可进行定时更新测试与提交数据库测试
- 当区块测试与定时更新测试完成后，不包含向数据库提交的部分，进行子系统整体运行测试
- 当向数据库提交部分完成后，进行总系统集成测试
- 进行子系统跨平台测试

#### 1.8.3 测试记录

对测试过程做记录，记录到测试报告中。

测试环境记录表表头如下

| 环境编号 | 配置                                      |
| -------- | ----------------------------------------- |
| env1     | 1.6环境中硬件环境+windows2010+1.6主机环境 |
|          |                                           |

测试人员表表头如下

| 人员 | 负责部分 |
| ---- | -------- |
|      |          |

记录表表头如下

| 用例         | 用例内容               | 测试类型                                       | 测试人员 | 测试时间 | 状态                                     | 测试结果     | 备注 |
| ------------ | ---------------------- | ---------------------------------------------- | -------- | -------- | ---------------------------------------- | ------------ | ---- |
| 代码文件名   | 代码文件含义           | （区块测试、定时更新测试、提交测试、整体测试） |          |          | 已测试、未测试（留空认为未测试）、测试中 | 通过、未通过 |      |
| `M100307.py` | 南京市博物总馆爬虫文件 | 区块测试                                       | xxx      |          | 已测试                                   | 通过         |      |



### 1.9 质量检验

#### 1.9.1 代码质量检验

评价指标：

- 接口是否完整
- 文件头是否规范



#### 1.9.2 成果质量检验

评价指标：

- 爬取的数据字典是否规范（无异常值，ID与ARM_ID或CRM_ID存在）
- 是否完成基线
- 是否满足后端需求，是否满足前端需求



### 1.10 维护

#### 1.10.1 目的

在完成工作后，当出现新的一级博物馆，新的一级博物馆的网站，或一级博物馆网站迁移，或网站页面更改，源代码需要添加或更改时，需要维护或更新子系统版本。

#### 1.10.2 维护类型

| 维护类型名称 | 动机                                                         | 措施                           |
| ------------ | ------------------------------------------------------------ | ------------------------------ |
| 出现新博物馆 | 1. 出现新的一级博物馆及网站<br />2. 原有博物馆无网站后出现新的一级博物馆网站 | 派出新负责人进行代码编写和维护 |
| 博物馆迁移   | 1. 原有博物馆网站消失<br />2. 原有博物馆迁移                 | 见异常处理                     |
| 网站页面更改 | 1. 网站                                                      | 见异常处理                     |















